@page "/notes"
@using Microsoft.AspNetCore.Components.Authorization
@using SyncNotes.Shared.Models
@inject SyncNotes.Client.Services.NoteHubService NoteHub
@inject ILogger<Notes> Logger
@inject AuthenticationStateProvider AuthStateProvider

<div class="page-container">
    <div class="row mb-4">
        <div class="col">
            <h2 class="text-gradient mb-0">My Notes</h2>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="CreateNote">
                <i class="bi bi-plus-lg"></i> New Note
            </button>
        </div>
        <div class="col-auto">
            <button class="btn btn-outline-light" @onclick="ShowShareModal">
                <i class="bi bi-share"></i> Share
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 mb-4 mb-md-0">
            <div class="glass-card notes-sidebar">
                <div class="sidebar-header">
                    <h5 class="mb-0">All Notes</h5>
                    <span class="notes-count">@_notes.Count</span>
                </div>
                <div class="notes-list">
                    @if (_notes.Count == 0)
                    {
                        <div class="empty-state">
                            <i class="bi bi-journal-text"></i>
                            <p>No notes yet</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var note in _notes.Values
                            .Where(n => n.OwnerId == myUserId || n.SharedWith.Contains(myUserId))
                            .OrderByDescending(n => n.LastModified))
                        {
                            <div class="note-item @(note.Id == _selectedNote?.Id ? "active" : "")" 
                                 @onclick="() => SelectNote(note)">
                                <div class="note-title">@note.NoteName</div>
                                <div class="note-meta">
                                    <span class="note-author">@note.LastModifiedByName</span>
                                    <span class="note-date">@note.LastModified.ToLocalTime().ToString("MMM d, h:mm tt")</span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="glass-card editor-container">
                @if (_selectedNote != null)
                {
                    <div class="editor-header">
                        <input class="editor-title" 
                               @bind="_selectedNote.NoteName" 
                               @oninput="HandleTitleChange" 
                               placeholder="Untitled Note" />
                    </div>
                    <div class="editor-body">
                        <textarea class="editor-content" 
                                  value="@_selectedNote.Content"
                                  @oninput="HandleContentChange"
                                  placeholder="Start writing here..."></textarea>
                    </div>
                    <div class="editor-footer">
                        <button class="btn btn-danger" @onclick="() => DeleteNote(_selectedNote.Id)">
                            <i class="bi bi-trash"></i> Delete Note
                        </button>
                    </div>
                }
                else
                {
                    <div class="empty-editor">
                        <i class="bi bi-file-earmark-text"></i>
                        <p>Select a note to view or edit</p>
                        <button class="btn btn-primary" @onclick="CreateNote">
                            <i class="bi bi-plus-lg"></i> Create New Note
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Share Modal -->
    @if (_showShareModal)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content glass-card">
                    <div class="modal-header">
                        <h5 class="modal-title text-gradient">Share Note</h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="HideShareModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Select Friend:</label>
                            <select class="form-select" @bind="_selectedFriendId">
                                <option value="">-- Select a friend --</option>
                                @foreach (var friend in _friends)
                                {
                                    <option value="@friend.Id">@friend.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-light" @onclick="HideShareModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="ShareNote">Share</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-glass alert-dismissible fade show position-fixed bottom-0 end-0 m-3">
            <i class="bi bi-exclamation-triangle me-2"></i>
            @_errorMessage
            <button type="button" class="btn-close btn-close-white" @onclick="@(() => _errorMessage = null)"></button>
        </div>
    }

    @if (_showErrorModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Delete Error</h5>
                        <button type="button" class="btn-close" @onclick="HideErrorModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>@_errorMessage</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideErrorModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

<style>
    .notes-sidebar {
        display: flex;
        flex-direction: column;
        height: 70vh;
    }

    .sidebar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .notes-count {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        padding: 0.25rem 0.75rem;
        font-size: 0.8rem;
    }

    .notes-list {
        flex: 1;
        overflow-y: auto;
        padding: 0.5rem;
    }

    .note-item {
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 0.5rem;
        cursor: pointer;
        transition: all 0.2s ease;
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .note-item:hover {
        background: rgba(255, 255, 255, 0.05);
    }

    .note-item.active {
        background: rgba(79, 172, 254, 0.1);
        border-color: rgba(79, 172, 254, 0.3);
    }

    .note-title {
        font-weight: 600;
        margin-bottom: 0.25rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .note-meta {
        display: flex;
        justify-content: space-between;
        font-size: 0.75rem;
        color: rgba(255, 255, 255, 0.6);
    }

    .editor-container {
        display: flex;
        flex-direction: column;
        height: 70vh;
    }

    .editor-header {
        padding: 1.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .editor-title {
        width: 100%;
        background: transparent;
        border: none;
        color: white;
        font-size: 1.5rem;
        font-weight: 600;
        padding: 0;
    }

    .editor-title:focus {
        outline: none;
    }

    .editor-body {
        flex: 1;
        padding: 1.5rem;
    }

    .editor-content {
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        color: white;
        padding: 1rem;
        resize: none;
    }

    .editor-content:focus {
        outline: none;
        border-color: rgba(79, 172, 254, 0.5);
    }

    .editor-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: flex-end;
    }

    .empty-editor, .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        padding: 2rem;
        color: rgba(255, 255, 255, 0.5);
        text-align: center;
    }

    .empty-editor i, .empty-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .empty-editor p, .empty-state p {
        margin-bottom: 1.5rem;
    }

    /* Custom scrollbar */
    .notes-list::-webkit-scrollbar {
        width: 6px;
    }

    .notes-list::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
    }

    .notes-list::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 10px;
    }

    .notes-list::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.3);
    }

    /* Modal customization */
    .modal-content.glass-card {
        background: rgba(15, 12, 41, 0.8);
    }

    .form-select {
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        border-radius: 12px;
    }

    .form-select:focus {
        background-color: rgba(255, 255, 255, 0.15);
        border-color: rgba(79, 172, 254, 0.5);
        box-shadow: 0 0 0 0.25rem rgba(79, 172, 254, 0.25);
        color: white;
    }
</style>

@code {
    private readonly Dictionary<string, Note> _notes = new();
    private Note? _selectedNote;
    private bool _showShareModal;
    private string _selectedFriendId = "";
    private List<User> _friends = new();
    private string? _errorMessage;
    private string myUserId = string.Empty;
    private bool _isProcessingUpdate = false;
    private bool _showErrorModal = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            myUserId = authState.User.FindFirst(c => c.Type == "sub" || c.Type.EndsWith("nameidentifier"))?.Value ?? string.Empty;

            await NoteHub.StartAsync();

            NoteHub.OnInitialStateReceived += (notes, _, _) =>
            {
                _notes.Clear();
                foreach (var note in notes)
                {
                    if (note.OwnerId == myUserId || note.SharedWith.Contains(myUserId))
                    {
                        _notes[note.Id] = note;
                    }
                }

                if (_selectedNote != null && _notes.TryGetValue(_selectedNote.Id, out var restored))
                    _selectedNote = restored;
                else if (_notes.Count > 0)
                    _selectedNote = _notes.Values.OrderByDescending(n => n.LastModified).FirstOrDefault();

                InvokeAsync(StateHasChanged);
            };

            NoteHub.OnNoteReceived += note =>
            {
                if (note.OwnerId == myUserId || note.SharedWith.Contains(myUserId))
                {
                    _notes[note.Id] = note;
                    if (_selectedNote?.Id == note.Id)
                    {
                        _selectedNote = note;
                    }
                    InvokeAsync(StateHasChanged);
                }
            };

            NoteHub.OnNoteShared += note =>
            {
                if (note.OwnerId == myUserId || note.SharedWith.Contains(myUserId))
                {
                    _notes[note.Id] = note;
                    InvokeAsync(StateHasChanged);
                }
            };

            NoteHub.OnNoteDeleted += id =>
            {
                if (_notes.Remove(id))
                {
                    if (_selectedNote?.Id == id)
                        _selectedNote = null;
                    InvokeAsync(StateHasChanged);
                }
            };

            NoteHub.OnConnectionError += error =>
            {
                _errorMessage = error;
                InvokeAsync(StateHasChanged);
            };

            // Friend events
            NoteHub.OnFriendsReceived += friends =>
            {
                _friends = friends.ToList();
                InvokeAsync(StateHasChanged);
            };

            NoteHub.OnFriendAdded += friend =>
            {
                if (!_friends.Any(f => f.Id == friend.Id))
                {
                    _friends.Add(friend);
                    InvokeAsync(StateHasChanged);
                }
            };

            NoteHub.OnFriendRemoved += friendId =>
            {
                _friends.RemoveAll(f => f.Id == friendId);
                InvokeAsync(StateHasChanged);
            };

            await NoteHub.GetFriends();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing notes page");
            _errorMessage = "Failed to initialize notes page. Please refresh.";
        }
    }

    private void SelectNote(Note note)
    {
        if (_notes.TryGetValue(note.Id, out var freshNote))
            _selectedNote = freshNote;
        else
            _selectedNote = note;
    }

    private async Task CreateNote()
    {
        var note = new Note { NoteName = "Untitled" };
        _notes[note.Id] = note;
        _selectedNote = note;
        await NoteHub.SendNote(note);
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleContentChange(ChangeEventArgs e)
    {
        if (_selectedNote != null)
        {
            _selectedNote.Content = e.Value?.ToString() ?? "";
            await NoteHub.SendNote(_selectedNote);
        }
    }

    private async Task HandleTitleChange(ChangeEventArgs e)
    {
        if (_selectedNote != null)
        {
            _selectedNote.NoteName = e.Value?.ToString() ?? "Untitled";
            await NoteHub.SendNote(_selectedNote);
        }
    }

    private async Task DeleteNote(string noteId)
    {
        try
        {
            await NoteHub.DeleteNote(noteId);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _showErrorModal = true;
            StateHasChanged();
        }
    }

    private void ShowShareModal()
    {
        if (_selectedNote == null)
        {
            _errorMessage = "Please select a note to share.";
            return;
        }
        _showShareModal = true;
    }

    private void HideShareModal()
    {
        _showShareModal = false;
        _selectedFriendId = "";
    }

    private async Task ShareNote()
    {
        if (string.IsNullOrEmpty(_selectedFriendId))
        {
            _errorMessage = "Please select a friend to share with.";
            return;
        }
        if (_selectedNote == null)
        {
            _errorMessage = "No note selected.";
            return;
        }
        try
        {
            await NoteHub.ShareNote(_selectedNote.Id, _selectedFriendId);
            HideShareModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sharing note");
            _errorMessage = "Failed to share note. Please try again.";
        }
    }

    private string ContentProxy
    {
        get => _selectedNote?.Content ?? "";
        set
        {
            if (_selectedNote != null && _selectedNote.Content != value)
            {
                _selectedNote.Content = value;
                _ = Task.Run(async () => await NoteHub.SendNote(_selectedNote));
            }
        }
    }

    private void HideErrorModal()
    {
        _showErrorModal = false;
        _errorMessage = string.Empty;
    }
}
